## Absichern eines Nginx-Webserver

### 1. **Minimierung der Angriffsfläche**
   - **Unnötige Module deaktivieren**: Lade nur die Module, die tatsächlich benötigt werden. Weniger aktivierte Module bedeuten weniger potenzielle Sicherheitslücken.
   - **Standardseite entfernen**: Die Nginx-Standardseite (index.html) sollte durch eine eigene, sichere Startseite ersetzt oder entfernt werden.
   - **Server-Tokens deaktivieren**: Verhindere die Anzeige von Nginx-Versionen in HTTP-Headern, um Angreifern keine Hinweise auf mögliche Schwachstellen zu geben.
     ```nginx
     server_tokens off;
     ```

### 2. **Zugriffsbeschränkungen**
   - **IP-basierte Zugriffskontrolle**: Beschränke den Zugriff auf sensible Bereiche (z.B. Admin-Bereiche) durch IP-Adressfilter.
     ```nginx
     location /admin {
         allow 192.168.1.0/24;
         deny all;
     }
     ```
   - **Firewall und Fail2Ban**: Setze eine Firewall ein (z.B. `ufw` oder `iptables`) und verwende `Fail2Ban`, um wiederholte fehlerhafte Zugriffsversuche zu blockieren.

### 3. **SSL/TLS-Konfiguration**
   - **SSL verwenden**: Stelle sicher, dass alle Verbindungen über HTTPS erfolgen. Dafür ein SSL-Zertifikat installieren und konfigurieren.
   - **SSL/TLS Protokolle**: Veraltete Protokolle wie SSLv3 und TLS 1.0 sollten deaktiviert werden.
     ```nginx
     ssl_protocols TLSv1.2 TLSv1.3;
     ```
   - **Starke Verschlüsselung**: Verwende starke Cipher Suites und priorisiere sie entsprechend.
     ```nginx
     ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
     ssl_prefer_server_ciphers on;
     ```

### 4. **Sichere HTTP-Header**
   - **HTTP Strict Transport Security (HSTS)**: Erzwinge HTTPS-Verbindungen, indem du HSTS aktivierst.
     ```nginx
     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
     ```
   - **Content Security Policy (CSP)**: Schränke die Quellen ein, von denen Inhalte geladen werden können.
   - **X-Content-Type-Options**: Verhindere MIME-Type Sniffing.
     ```nginx
     add_header X-Content-Type-Options "nosniff";
     ```
   - **X-Frame-Options**: Schutz gegen Clickjacking.
     ```nginx
     add_header X-Frame-Options "SAMEORIGIN";
     ```
   - **X-XSS-Protection**: Aktiviere den XSS-Schutz im Browser.
     ```nginx
     add_header X-XSS-Protection "1; mode=block";
     ```

### 5. **Sichere Konfigurationen und Dateizugriffsrechte**
   - **Verzeichnissicherheit**: Stelle sicher, dass Nginx nicht in Verzeichnisse hineinlisten kann.
     ```nginx
     location / {
         autoindex off;
     }
     ```
   - **Dateirechte**: Verhindere unberechtigten Zugriff auf sensible Dateien, wie z.B. Konfigurationsdateien.
     ```nginx
     location ~ /\.ht {
         deny all;
     }
     ```
   - **Nutzer und Gruppenrechte**: Lasse Nginx unter einem eigenen, nicht privilegierten Benutzer laufen.
     ```nginx
     user nginx;
     ```

### 6. **Rate Limiting und DoS-Schutz**
   - **Rate Limiting**: Beschränke die Anzahl der Anfragen pro IP, um Brute-Force-Angriffe und DoS-Attacken zu erschweren.
     ```nginx
     limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
     location /login {
         limit_req zone=one burst=5 nodelay;
     }
     ```

### 7. **Logging und Monitoring**
   - **Log-Überwachung**: Aktiviere und überwache die Access- und Error-Logs, um Auffälligkeiten zu erkennen.
   - **Intrusion Detection Systems (IDS)**: Setze Tools ein, die potenzielle Angriffe erkennen und melden können.

Indem du diese Maßnahmen umsetzt, erhöhst du die Sicherheit deines Nginx-Webservers erheblich. Beachte, dass Sicherheitskonfigurationen regelmäßig überprüft und aktualisiert werden sollten, um mit neuen Bedrohungen Schritt zu halten.